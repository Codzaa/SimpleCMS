@page "/signup"
@using Data
@inject AppDBContext _appDBContext
@inject NavigationManager _navigationManager
@inject UserService _userService
@using Microsoft.EntityFrameworkCore;

<EditForm Model="_userToCreate" OnValidSubmit="CreateUser">
<h2 class="text-center">Sign Up</h2>

    <div class="mb-3">
      <label for="Username" class="form-label">Email address</label>
      <input @bind="_userToCreate.UserName" type="text" class="form-control" id="Username" aria-describedby="UsernameHelp"> 
      <div id="UsernameHelp" class="form-text">Choose a unique Username</div>
    </div>

    <div class="mb-3">
      <label for="Password" class="form-label">Password</label>
      <input @bind="_userToCreate.UserPassword" type="password" class="form-control" id="Password">
    </div>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <button type="submit" class="btn btn-primary">Signup</button>
</EditForm>

@code{

    private CustomUser _userToCreate = new CustomUser
    {
       UserName = "",
       UserPassword = "",
       UserNickName = "",
    };

    /// Function/Method for Creating a User
    private async Task CreateUser(){
        /// Check if the user already exists in the Database
        var doesUserExist = await UserExits();
        ///
        if(!doesUserExist){
            Console.WriteLine("User Does not Exits");
            /// Set Global User
            await SetUser(_userToCreate);
            await _appDBContext.CustomUsers.AddAsync(_userToCreate);
            await _appDBContext.SaveChangesAsync();
            _navigationManager.NavigateTo("/dashboard/home");
        }else{
            /// Display Message
            Console.WriteLine("User Exits");
        }
        
    }

    /// Checks if the User name has been already used
    private async Task<bool> UserExits(){
        bool result = false;
        var user = await _appDBContext.CustomUsers.FirstOrDefaultAsync(element => element.UserName.Equals(_userToCreate.UserName));
        if(user != null){
            result = true;
        }
        return result;
    }

    /// Set Global User
    private async Task SetUser(CustomUser user){
        /// await _userService.SetGlobalUser(user);
        _userService.GlobalUser = user;
        Console.WriteLine("GLOBAL USER IS " + _userService.GlobalUser.UserName);
    }
}
