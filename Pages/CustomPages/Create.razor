@page "/createpage"
@using Data
@inject NavigationManager navigationManager
@inject IJSRuntime _jsruntime
@inject AppDBContext _appDBContext
@inject NavigationManager _navigationManager

<EditForm Model="_pageToCreate" OnValidSubmit="CreatePage">
    
            <!--=============================================================================================-->
            <br />
            <!--++++++++++++++++++++++++++++++++++++++Rich Text Editor+++++++++++++++++++++++++++++++++++++++-->
            <div class="card-header text-center">
                <span class="formTitle">Content</span>
            </div>
            <div class="form-group mb-3">
                <label for="productcontent" class="myHidden">content</label>
                <InputText @bind-Value=" _pageToCreate.Body"
                           class="form-control"
                           id="editor" />
            </div>
            <!--=============================================================================================-->
            <br />

            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row justify-content-md-center">
                <div class="col">
                    <button class="btn orangeCustomColorBG btn-lg btn-block" type="submit">Save</button>
                </div>
                <div class="col">
                    <NavLink href="/admin/products">
                        <button class="btn btn-secondary btn-lg btn-block">Cancel</button>
                    </NavLink>
                </div>
            </div>
</EditForm>
@code{

    /// Function that runs after the first render
    /// Runs once
    //[Inject] ApplicationDbContext ApplicationDbContext { get; set; }
    private CustomPage _pageToCreate = new CustomPage
    {
       PageName = "Page Name",
       PageHeading = "Page Heading",
       Body ="Page Body",
    };
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            /// Start the Editor
            StartEditor_F();
            ///  State has Changed(Refresh Page)
            StateHasChanged();
        }
        //
        //return base.OnAfterRenderAsync(firstRender);
    }

    /// Function/Method that Starts the Editor
    /// Ckeditor
    public async void StartEditor_F()
    {
        /// Runs Javascript Function/Method
        await _jsruntime.InvokeVoidAsync("StartEditor_F");
        
    }
    private async Task CreatePage()
    {
        /*
        if(file != null)
        {
            await SaveVideo_F();
        }
        */

        //Call Javascript Function to Get Save Editor Data
        _pageToCreate.Body = await _jsruntime.InvokeAsync<string>("SaveEditorData_F");
        //Save Images Data
        //await SaveImages_F();
        //
        await _appDBContext.CustomPages.AddAsync(_pageToCreate);
        await _appDBContext.SaveChangesAsync();
        //NavigationManager.NavigateTo("/admin/products");
        

    }
}