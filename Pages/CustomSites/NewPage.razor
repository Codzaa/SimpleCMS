@page "/newpage"
@using Microsoft.JSInterop
@using cms.Data
@using Microsoft.EntityFrameworkCore
@inject IJSRuntime _jsruntime
@inject AppDBContext _appDBContext
@inject NavigationManager _navigationManager
@inject UserService _userService


<EditForm Model="_pageToCreate" OnValidSubmit="CreatePageF">

    <InputSelect @bind-Value="CurrentSiteId" @onchange="CheckSiteNameF" class="form-control" col-3>
        @if (_mySites!= null){
            @foreach (var site in _mySites){
                <option value =@site.Id.ToString()>@site.SiteName + @site.Id</option>
            }
        }
    </InputSelect>

    <div class="mb-3">
        <label for="pageBody" class="form-label">Email address</label>
        <input type="text" @bind="_pageToCreate.Body" class="form-control" id="editor" aria-describedby="pageBodyHelp">
    </div>

    <DataAnnotationsValidator />
    <ValidationSummary />

    <button type="submit" class="btn btn-primary">Save</button>

</EditForm>


@code{

    /// Page to be save Object
    private CustomPage _pageToCreate = new CustomPage{
        SiteId = 1,
    };

    /// 
    private string? currentSiteId = null;
    private string? CurrentSiteId
    {
        get
        {
        return currentSiteId;
        }
        set
        {
        currentSiteId = value;
        //run your process here to handle dropdown changes
        }
    }

    /// List of all the websites a the user owns
    private List<CustomSite> _mySites = new List<CustomSite>();

    /// Function called after first Render
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            /// Get all the Websites
            var sites =  await _appDBContext.CustomSites.ToListAsync();
            _mySites = sites.FindAll(element => element.OwnerId.Equals(_userService.GlobalUser.Id));
            //Create Editor when the Page has been rendered
            StartEditor_F();
            //
            StateHasChanged();

        }
    }


    /// Function/Method for Creating a Page
    private async Task CreatePageF(){
        Console.WriteLine("Site Id" + CurrentSiteId);
        /*
        //Call Javascript Function to Get Save Editor Data
        _pageToCreate.Body = await _jsruntime.InvokeAsync<string>("SaveEditorData_F");
        //
        await _appDBContext.CustomPages.AddAsync(_pageToCreate);
        await _appDBContext.SaveChangesAsync();
        _navigationManager.NavigateTo("/admin/pages/normalpages");
        */
    }

    public async void StartEditor_F()
    {

        await _jsruntime.InvokeVoidAsync("StartEditor_F");
    }

    private async void CheckSiteNameF(){
        Console.WriteLine("Site Id" + CurrentSiteId);
    }   


}